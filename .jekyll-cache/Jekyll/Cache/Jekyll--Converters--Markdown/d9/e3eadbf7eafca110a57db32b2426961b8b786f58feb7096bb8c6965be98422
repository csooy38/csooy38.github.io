I"84<h1 id="mybatis">MyBatis</h1>
<hr />
<h2 id="1-mybatis">1. MyBatis</h2>
<ul>
  <li>객체지향언어인 자바의 관계형 데이터베이스 프로그래밍을 좀 더 쉽게 구현할 수 있도록 도와주는 개발 프레임워크.</li>
  <li>자바는 JDBC API를 제공하지만, 이런 JDBC를 이용하면 한 개의 클래스에 반복된 코드가 존재, 한 파일에 Java 언어와 SQL 언어가 섞여 있어서 재사용성 등이 안 좋아지는 단점이 발생한다.</li>
  <li>MyBatis는 이러한 JDBC의 단점들을 개선했으며, 개발자가 작성한 SQL 명령어와 자바 객체를 매핑해주는 기능을 제공하며, 기존에 사용하던 SQL 명령어를 재사용 가능하게 한다.</li>
</ul>

<p><br /></p>

<h3 id="11-mybatis의-특징">1.1. MyBatis의 특징</h3>
<ul>
  <li>한 두 줄의 자바 코드로 DB 연동을 처리.</li>
  <li>SQL 명령어를 자바 코드에서 분리하여 XML 파일에 따로 관리.</li>
</ul>

<p><br /></p>

<h3 id="12-mybatis-설정-작업">1.2. MyBatis 설정 작업</h3>
<ul>
  <li>스프링과 MyBatis를 연동하기 위한 라이브러리 설정 - pom.xml
    <ul>
      <li>MyBatis 프레임워크 라이브러리 추가.</li>
      <li>MyBatis-Spring 라이브러리 추가</li>
      <li>Spring-JDBC 라이브러리 추가.</li>
      <li>데이터베이스와 연결을 담당하는 DataSource 객체 설정.</li>
    </ul>
  </li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- mybatis 프레임워크 라이브러리 --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>3.4.6<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- mybatis-spring 라이브러리 --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>mybatis-spring<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.3.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- spring-jdbc 라이브러리 --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>${org.springframework-version}<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><br /></p>

<hr />
<h4 id="예">[예]</h4>

<ul>
  <li><strong>root-context.xml</strong> <br />
myBatis 설정.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 스프링 작업시 설정 파일을 설정하는 공간 --&gt;</span>
	
<span class="c">&lt;!-- 1. c3p0 커넥션풀 DataSource 클래스 설정 --&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">name=</span><span class="s">"dataSource"</span> <span class="na">class=</span><span class="s">"com.mchange.v2.c3p0.ComboPooledDataSource"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"driverClass"</span> <span class="na">value=</span><span class="s">"oracle.jdbc.driver.OracleDriver"</span> <span class="nt">/&gt;</span>
	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"jdbcUrl"</span> <span class="na">value=</span><span class="s">"jdbc:oracle:thin:@localhost:1521:XE"</span> <span class="nt">/&gt;</span>
	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"user"</span> <span class="na">value=</span><span class="s">"web"</span> <span class="nt">/&gt;</span>
	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"password"</span> <span class="na">value=</span><span class="s">"1234"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
	
<span class="c">&lt;!-- 2. SqlSessionFactory 클래스 설정 --&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">name=</span><span class="s">"sqlSessionFactory"</span> <span class="na">class=</span><span class="s">"org.mybatis.spring.SqlSessionFactoryBean"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSource"</span> <span class="na">ref=</span><span class="s">"dataSource"</span> <span class="nt">/&gt;</span>
	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"mapperLocations"</span> <span class="na">value=</span><span class="s">"classpath:/mapper/*.xml/"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
	
<span class="c">&lt;!-- 3. SqlSessionTemplate 클래스 설정 --&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">name=</span><span class="s">"sqlSession"</span> <span class="na">class=</span><span class="s">"org.mybatis.spring.SqlSessionTemplate"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">"sqlSessionFactory"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li><strong>servlet-context.xml</strong>  <br />
com.spring 패키지 아래에 있는 모든 파일들을 자동으로 읽도록 설정.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">"com.spring"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li><strong>EmpDAO 인터페이스</strong>  <br />
필요 메서드를 추상메서드로 선언한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">EmpDAO</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="nc">EmpDTO</span> <span class="nf">getCont</span><span class="o">(</span><span class="kt">int</span> <span class="n">empno</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>
    <p><strong>EmpDAOImpl 클래스</strong>  <br />
EmpDAO 인터페이스를 상속받아 추상메서드를 오버라이딩 한다. <br />
emp.xml에서 동일한 <code class="language-plaintext highlighter-rouge">id</code>의 sql문을 실행 후 값을 받아온다.<br />
파라미터가 존재하지 않으면 <code class="language-plaintext highlighter-rouge">id</code>만, 넘겨줄 파라미터가 존재하면 파라미터까지 작성한다.</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">this.sqlSession.selectList(" id " )</code> : 리스트를 반환받을 때 사용.</li>
  <li><code class="language-plaintext highlighter-rouge">this.sqlSession.selectOne(" id ", 파라미터)</code> : 하나의 값을 반환받을 때 사용.</li>
  <li><code class="language-plaintext highlighter-rouge">this.sqlSession.insert(" id ", 파라미터)</code> : insert문을 작성할 때 사용.</li>
  <li><code class="language-plaintext highlighter-rouge">this.sqlSession.update(" id ", 파라미터)</code> : update문을 작성할 때 사용.</li>
  <li><code class="language-plaintext highlighter-rouge">this.sqlSession.delete(" id ", 파라미터)</code> : delete문을 작성할 때 사용.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmpDAOImpl</span> <span class="kd">implements</span> <span class="nc">EmpDAO</span> <span class="o">{</span>

	<span class="nd">@Autowired</span>
	<span class="kd">private</span> <span class="nc">SqlSessionTemplate</span> <span class="n">sqlSession</span><span class="o">;</span>
	
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">EmpDTO</span> <span class="nf">getCont</span><span class="o">(</span><span class="kt">int</span> <span class="n">empno</span><span class="o">)</span> <span class="o">{</span>
		
		<span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">sqlSession</span><span class="o">.</span><span class="na">selectOne</span><span class="o">(</span><span class="s">"cont"</span><span class="o">,</span> <span class="n">empno</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>
    <p><strong>emp.xml</strong>  <br />
src/main/resources/mapper 폴더 아래 있는 파일. <br />
root-context.xml 에서 SqlSessionFactory 클래스 설정시 작성한 mapperlocations의 위치와 동일한 곳에 있어야 한다.<br />
EmpDAOImpl 클래스의 메서드에서 호출한 <code class="language-plaintext highlighter-rouge">id</code>와 동일한 mapper가 실행되고 설정된 resultType으로 반환한다.</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">namespace</code> : 패키지 포함해서 인터페이스 이름으로 작성해야 한다. mapper 들을 구분하는 식별자로 매우 중요하다.</li>
  <li><code class="language-plaintext highlighter-rouge">id</code> : 컨트롤러에서 지정한 <code class="language-plaintext highlighter-rouge">id</code>와 동일한 <code class="language-plaintext highlighter-rouge">id</code>를 찾아서 실행된다.</li>
  <li><code class="language-plaintext highlighter-rouge">resultType</code> : 반환타입을 설정한다. 패키지명까지 작성해야 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">parameterType</code> : 넘어오는 파라미터 타입과 동일하게 설정한다.   <br />
<code class="language-plaintext highlighter-rouge">empno = ?</code>와 같이 <code class="language-plaintext highlighter-rouge">?</code>에 들어가는 값에 해당하며, sql문 작성시 <code class="language-plaintext highlighter-rouge">#{파라미터명}</code>과 같이 작성한다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">&lt;select&gt;</code> <code class="language-plaintext highlighter-rouge">&lt;insert&gt;</code> <code class="language-plaintext highlighter-rouge">&lt;update&gt;</code> <code class="language-plaintext highlighter-rouge">&lt;delete&gt;</code> : 작성하는 sql문에 맞는 태그를 사용하여 작성한다.  <br />
<br /></p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">![CDATA[]]</code> : 쿼리문을 작성할 때 조건식 기호(<code class="language-plaintext highlighter-rouge">&lt;</code>, <code class="language-plaintext highlighter-rouge">&gt;</code>, <code class="language-plaintext highlighter-rouge">&amp;</code>)를 사용해야 하는데 XML에서 이런 기호들을 쿼리문의 조건식 기호를 인식하는 것이 아니라 태그로 인식하는 경우가 발생한다. 이런 경우에는 에러가 발생한다. 따라서 이 조건식 기호를 단순한 문자열로 인식시켜주어야 한다.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
  
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.spring.model.EmpDAO"</span><span class="nt">&gt;</span>

	<span class="c">&lt;!-- 파라미터(인자) 타입과 반환타입을 지정해준다. --&gt;</span>
	<span class="c">&lt;!-- 파라미터는 `#{파라미터명}`으로 지정 --&gt;</span>
	<span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"cont"</span> <span class="na">parameterType=</span><span class="s">"int"</span> <span class="na">resultType=</span><span class="s">"com.spring.model.EmpDTO"</span><span class="nt">&gt;</span>
		select * from emp where empno = #{empno}
	<span class="nt">&lt;/select&gt;</span>
	
	<span class="nt">&lt;update</span> <span class="na">id=</span><span class="s">"seq"</span> <span class="na">parameterType=</span><span class="s">"int"</span><span class="nt">&gt;</span>
		<span class="cp">&lt;![CDATA[
			update products set pnum = pnum -1 where pnum &gt;</span> #{pnum}
		]]&gt;
	<span class="nt">&lt;/update&gt;</span>
	
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>
:ET